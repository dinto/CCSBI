1)python -m venv virenv
2)virenv\Scripts\activate
3)pip install django
4)django-admin startproject CCSBI . 
5)python manage.py startapp CcsbiProject
6)'CcsbiProject', in installed apps in settings
7)python manage.py runserver

8)in view.py:

def CcsbiProject(request):
    return render(request,'index.html',{})

9)mkdir CcsbiProject/templates/

create index.html => CcsbiProject/templates/index.html

10)create CcsbiProject/urls.py

from django.urls import path
from CcsbiProject import views

urlpatterns = [
    path('', views.CcsbiProject, name='index'),
]

11)
inside CCSBI/urls.py=>
from django.urls import path, include
path('', include('CcsbiProject.urls')),


12)#Instead of having to import Bootstrap styles into every app, we can create a template or set of templates that are shared by all the apps. 

mkdir CCSBI/templates/
create html under=> CCSBI/templates/base.html

inside base.html=>
add following lines inside base.html=>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
<!DOCTYPE html>
<html>
    <head>
        <title>CCSBI</title>
    </head>

    <body>
{% block content %}

{% endblock content%}
</body>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>



13)

change CcsbiProject->templates->index.html =>

{% extends "base.html" %}

{% block content %}

{% endblock content %}

14)
CCSBI/settings.py=>, update TEMPLATES:
'DIRS': ["CCSBI/templates/"],




15) static file adding:
create folder static and inside css and js ,images
create file js 
in settings:
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATICFILES_DIRS=[os.path.join(BASE_DIR,'static')]

or
import os
STATIC_ROOT =os.path.join(BASE_DIR,'static/')


in index.html:
{% load static %}
<script src={% static 'js/dashboard.js' %}></script>
<link href={% static 'css/dashboard/dashboard.css' %} rel="stylesheet" type="text/css" />



=====================
github
====================
git init
create .gitignore
-----------------
**/__pycache__
*.pyc
db.sqlite3
.idea/
virenv/
----------------
python -m pip freeze > requirements.txt
git add .
git commit -m "initial"
git remote add origin git@github.com:dinto/CCSBI.git
git branch -M master
git push -u origin master


============================
Google cloud setup
============================
create instance in gcp
name:ccsbi
region:us-central1(lowa) ; Zone:us-central
series:e2,machine type: e2-medium(2vcpu,1gb memory)

firewall: tick in http and https
click create

ssh 

cd /home/citsci
sudo su
apt-get update
apt-get install git

cd ~/.ssh && ssh-keygen

copy below content
linux : cat id_rsa.pub 

Add your key to your account via the website.
https://github.com/settings/keys

git config --global user.name "dinto"
git config --global user.email dinto.t.d@gmail.com


git clone git@github.com:dinto/CCSBI.git

apt install python3-pip python3-dev libpq-dev nginx curl
pip3 install --upgrade pip
pip3 install virtualenv
(outside of project)
virtualenv venv
source venv/bin/activate

python3 install gunicorn (local system first)
python -m pip  install gunicorn

in settings: add allowed host = '34.171.85.158'

STATIC_ROOT =os.path.join(BASE_DIR,'static/')
python manage.py collectstatic
python -m pip freeze > requirements.txt

push into github

(in gcp machine):

sudo git pull origin master  
pip install -r requirements.txt

sudo apt install ufw
sudo ufw allow 8000
python manage.py runserver 0.0.0.0:8000
http://34.171.85.158:8000/
view network details->defaul->firewall rule->add firewall rule
Name: django8000
target tag: django8000
source ip ranges: 0.0.0.0/0
tcp: 8000
 create

 python3 manage.py runserver 0.0.0.0:80
 http://34.171.85.158/

 gunicorn --bind 0.0.0.0:8000 CCSBI.wsgi

 sudo vim /etc/systemd/system/gunicorn.socket

[Unit]
Description=gunicorn.socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target


sudo vim /etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=citsci
Group=www-data
WorkingDirectory=/home/citsci/CCSBI
ExecStart=/home/citsci/venv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          CCSBI.wsgi:application

[Install]
WantedBy=multi-user.target


sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket
sudo systemctl status gunicorn.socket  (gunicorn socket is active but gunicorn service not active)
sudo systemctl status gunicorn

curl --unix-socket /run/gunicorn.sock localhost
sudo systemctl status gunicorn

sudo vim /etc/nginx/sites-available/CCSBI

server {
    listen 80;
    server_name 34.171.85.158;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/citsci/CCSBI;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}

sudo ln -s /etc/nginx/sites-available/CCSBI /etc/nginx/sites-enabled/
nginx -t
sudo systemctl restart nginx
sudo systemctl restart gunicorn.socket
ufw allow 'Nginx Full'
ufw delete allow 8000

#https://www.youtube.com/watch?v=bD75adrlkes&t=14s

=========================================================

point your domain to google clouddns
go to "network services" under networking -> cloud dns->enable 
create dns zone =>
zone type: public
zone name =>citsciindia
dns name: citsciindia.in.
description: citsciindia.in
create

add record set=>


dns name: ccsbi.citsciindia.in.	
record type : A	
ip address : 34.171.85.158

dns name: www.ccsbi.citsciindia.in.	
record type : cname	
cname : ccsbi.citsciindia.in.	


check in : https://dnschecker.org/ 


ccsbi.citsciindia.in

ip to domainname forwarding(34.171.85.158 to www.ccsbi.citsciindia.in)
vim /etc/nginx/sites-available/CCSBI
server_name ccsbi.citsciindia.in

comment all in default page: hence ip to domain issue will solve
vim /etc/nginx/sites-available/default

sudo systemctl restart nginx
sudo systemctl restart gunicorn.socket


reference: https://www.youtube.com/watch?v=1lsFYHtWbEc

=======================================================
How to Safely Redirect HTTP to HTTPS in Google Cloud Platform
=======================================================
goto instance group page:
https://console.cloud.google.com/compute/instanceGroups/list?_ga=2.209932887.373534072.1672298415-236081045.1671440915&project=centered-sight-372111

create instance group
select "new unmanaged instance group"
name:citsciindia-instance-group
select vm instance->create


network services-> create load balancer=>start configuration (under https load balancing)=>
select  From Internet to my VMs or serverless services
select  Global HTTP(S) Load Balancer

click on continue

name=> ccsbi-load-balancer

backend configuration->create backend service->
name:ccsbi-backend
under health check->create health check->
name: ccsbi-healthcheck
protocol:tcp
check-interval:30
save 
uncheck  cloud cdn

under backend=> select instance group 
port numbers: 80
create


frontend configuration=>
 name:ccsbi-frontend
protocol: https
ip address=> Ephemeral (create ip address  name:front-end-ip-citsciindia ->click reserve)

certificate=>create new certificate
name: ccsbi-ssl-cert
select create google-managed-certificate
domains: citsciindia.in
change domains: 
ccsbi.citsciindia.in
www.ccsbi.citsciindia.in
ccsbi.kfri.res.in
www.ccsbi.kfri.res.in
create
## not doing for Ephemeral    check-> Enable http to Https redirect 
done 

create


open citsciindia-load-balancer->
copy ip 
#35.241.43.162
34.160.23.130

previous ip:  34.171.85.158
change A record to this ip

ssl certificate checking :
https://www.ssllabs.com/ssltest/analyze.html?


https verifing:
1)verify your website pointing towards frontend LB
2)check the state of google managed cert added on the front end of LB
3)verify that frontend is using HTTPS and backend is using HTTP
4)verify your ssl cert



no healthy upstream error
netstat -tlnp | grep 80

apt-get install netcat
netcat -z -v localhost 80
netcat -z -v localhost 443


check that listening to 443 port:
sudo netstat -plnt

cloud.google.com/load-balancing/docs/health-check-concepts#ip-ranges

apt-get install tcpdump
sudo tcpdump -i any net 130.211.0.0/22 or net 35.191.0.0/16

curl -v localhost:80  (check 200ok is showing or not)

add 35.191.0.0/16  130.211.0.0/22 to firewall

cloud.google.com/load-balancing/docs/https/troubleshooting-ext-https-lbs#troubleshooting_general_connectivity_issues
  

35.224.95.128 for citsciindia.in.



ip forwarding:
cloud dns-> zone create->
zone type: priavte
name: citsciindiaforwarding
DNS name : ccsbi.kfri.res.in.
Description : citsciindia forwarding
Type : Forwarding
destination ip : 34.171.85.158


====================
redirect http to https by default
=====================
inside https load balancer 
create new https loadbalancer:
frontend configuration:
name:httptohttps

routing rules->check Advanced host and path rule
action-> check redirect the client to different host/path
path redirect-> check prefix redirect
HTTPS redirect-> Tick enable
done

remaining no changes then create




@media (max:width:500px){
    css
    }
    @media print{
    }
    
    @media(orientation: landscape){
    
    }
    @media(orientation: portrait){
    
    }
    
    @media(orientation: landscape) and (max:width:500px){
    
    }
    
    mn:width:
    
    mobile:
    tab: 
    t.v:
    print:
    desktop:
    
    
            /* Media Query for Mobile Devices */
            @media (max-width: 480px) {
            }
              
            /* Media Query for low resolution  Tablets, Ipads */
            @media (min-width: 481px) and (max-width: 767px) {
            }
              
            /* Media Query for Tablets Ipads portrait mode */
            @media (min-width: 768px) and (max-width: 1024px){
    
            }
              
            /* Media Query for Laptops and Desktops */
            @media (min-width: 1025px) and (max-width: 1280px){
            }
              
            /* Media Query for Large screens */
            @media (min-width: 1281px) {
    
            }
    
    